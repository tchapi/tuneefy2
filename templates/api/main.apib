FORMAT: 1A
HOST: https://data.tuneefy.com/v2

The tuneefy API
===
Welcome to the **tuneefy** API. This API provides access to the **tuneefy.com** service and exposes endpoints to search, aggregate and share music links.


<br>
## Version

The current version is `v2`, which this documentation is for. The legacy API was previously available at https://api.tuneefy.com but has been deprecated. Next versions of the API will reside in the same host, and will be prefixed with, say `v3`, `v4`, .. for instance.

<br>
## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).


<br>
## Representation of Date and Time

All exchange of date and time-related data, if applicable, MUST be done according to **ISO 8601** standard and stored in UTC.

When returning date and time-related data, the `YYYY-MM-DDThh:mm:ss+P` format MUST be used.


<br>
## Rate limiting

You SHOULD NOT hit the API more than 10 times per second. For the **agreggate** method, the limit is ~10 requests per minute. If you make too many requests, your IP might be blocked without warning. Contact us if this occurs, to find a solution.

> This is currently a limitation of the server on which the tuneefy API resides. Remember that this project is provided as-is, and that the costs (server, bandwidth, maintenance) are only covered by donations (that, as of 2018 and from the start, account for a mere â‚¬12).



<br>
## Authentication

The API endpoints require an OAuth access token. The token is necessary to authenticate **all** requests to the API.

<br>
### OAuth

The tuneefy API currently supports the [OAuth 2 draft](https://oauth.net/2/) specification. All OAuth2 requests MUST use the SSL endpoint available at https://data.tuneefy.com/v2/.

OAuth 2.0 is a simple and secure authentication mechanism. It allows applications to acquire an access token for tuneefy via a POST request to a token endpoint. Authentication with OAuth can be accomplished in the following steps:

  1. Register for an API key by sending a mail to api@tuneefy.com
  2. Exchange your customer id and secret for an access token
  3. Make requests by passing the token in the Authorization header
  4. When your token expires, you can get a new one 

<br>
### Getting an authorization token

Use the `/auth/token` endpoint to get a valid token. You will need your consumer key and secret.

> The only accepted grant type is `client_credentials`. See further down for more info.

<br>
### Passing the authorization token

You can either use the **Authorization** header, as such :

```http
Authorization: bearer 5262d64b892e8d4341000001
```

Or you can pass the `access_token` parameter with all your requests.

```http
GET platforms?access_token=5262d64b892e8d4341000001
```

The header method is RECOMMENDED.


::: note
## In short

* This API uses OAuth2 for authentication
* A token MUST be retrieved from the authentication endpoint before issuing any request
* Token MUST be provided in a `Authorization` header, or via the `access_token` parameter
* Token MUST be provided for each request
:::



<br>
## Pagination

The API can limit the number of results returned (for `search` and `aggregate` methods) via the `limit` parameter.

```http
GET search/track/qobuz?q=chopin&limit=2
```

This is not _strictly speaking_ pagination since there is no way to pass an offset to the API to retrieve the subsequent results, are they are fetched from different platforms that do not all support pagination.

The default limit is `10` results.

<br>
## Market search

The API can limit the search to specific geographic markets (for `search` and `aggregate` methods) via the `countryCode` parameter. The code must be an [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.

```http
GET search/track/qobuz?q=chopin&countryCode=IT
```

> Note that this code is only used for **Spotify**, **Tidal**, **Napster**, **iTunes**, and **Youtube**.<br> **Deezer**, **Qobuz**, **LastFM**, **Mixcloud**, **Soundcloud** and **Amazon Music** do not have this concept.

Bear in mind these specificities :
  - Youtube: the country code relates to the rights to view a video in a specific country;

The default countryCode is `FR` (if you don't specify it in your query); As a majority of platforms need a market / country code identifier, you cannot use `null` or a non-valid value here.


<br>
## Response format

This API uses the `Accept` header to identify the data type it should return.

```http
Accept: application/json
```

This header SHOULD be present in every request. If not, the API will use the default response format.

Alternatively, all API methods support an optional return format parameter `format=json`. Note that **html** is the default response format, but **xml** and **json** are also available.

| Return type |        Accept header       | format parameter |
|-------------|----------------------------|--------------------|
| JSON        | `Accept: application/json` | `format=json`      |
| XML         | `Accept: application/xml`  | `format=xml`       |
| XML (alt)   | `Accept: text/xml`         | `format=xml`       |
| HTML        | `Accept: text/html`        | `format=html`      |


::: note
## Info
The API does *not* support **JSONP**.
:::



<br>
## Status Codes and Errors


### Status codes
This API uses HTTP status codes to communicate with the API consumer.

+ `200 OK` - Response to a successful GET or POST.
+ `400 Bad Request` - Malformed request; form validation errors.
+ `401 Unauthorized` - When no or invalid authentication details are provided.
+ `404 Not Found` - When a non-existent resource is requested.
+ `405 Method Not Allowed` - Method not allowed.
+ `406 Not Acceptable` - Could not satisfy the request Accept header.


<br>
### Error codes and responses

This API returns both machine-readable error codes and human-readable error messages in response body when an error is encountered. An error can be encountered even if the response HTTP status code is 200.

+ `GENERAL_ERROR` - An error was encountered
+ `BAD_PLATFORM_TYPE` - This type of platform does not exist
+ `BAD_PLATFORM` - This platform does not exist
+ `MISSING_PERMALINK` - Missing or empty parameter : q (permalink)
+ `PERMALINK_UNKNOWN` - This permalink does not belong to any known platform
+ `FETCH_PROBLEM` - There was a problem while fetching data from the platform
+ `FETCH_PROBLEMS` - There was a problem while fetching data from the platforms
+ `NO_MATCH` - No match was found for this search
+ `NO_MATCH_PERMALINK` - No match was found for this permalink
+ `MISSING_QUERY` - Missing or empty parameter : q (query)
+ `BAD_MUSICAL_TYPE` - This musical type does not exist
+ `NO_INTENT` - Missing or empty parameter : intent
+ `NOT_CAPABLE_TRACKS` - This platform is not capable of searching tracks
+ `NOT_CAPABLE_ALBUMS` - This platform is not capable of searching albums
+ `NOT_AUTHORIZED` - Not authorized, check the token


<br>
## Intents

When searching on the tuneefy API, results are returned with an intent code, in the share object :

```
{
    ...
    share: {
        intent: '5911b14860e96',
        expires: '2016-05-05T12:30:00'
    }
}
```

This means that each result can be shared easily until the intent expires.

On our side, this allows for a practical way to create tuneefy link without cluttering the database and creating many links for each search result. As well, you don't necessarily need a tuneefy link when using the tuneefy API, hence the design choice.

To get the tuneefy link from the intent, just call the `/share` endpoint with this intent. It will consume the intent and return the tuneefy link corresponding to the search result.

> Once an intent is consumed, it is no longer available and calling the `/share` with a consumed or expired intent will result in a **400**.





# Data Structures

## Platform

- name: `Deezer` (string)
- type: `streaming` (string)
- homepage: `https://www.deezer.com/` (string)
- tag: `deezer` (string)
- mainAccentColor: `181818` (string)
- enabled (object)
    + api: `true` (boolean)
    + website: `true` (boolean)
- capabilities (object)
    + track_search: `true` (boolean)
    + album_search: `true` (boolean)
    + lookup: `true` (boolean)


## OAuth valid response (object)
+ `access_token`: `5262d64b892e8d4341000001` (string) - valid Token
+ `scope`: all (string) - scopes of current token
+ `expires_in`: 3600 (number)
+ `token_type`: Bearer (string)


## Platform Result
+ musical_entity (Musical Entity)
+ metadata (object)
  + score: 0.97 (number)
  + merges: 1 (number, optional)
+ share (object)
  + intent: `590c6c8320b1b` (string)
      
## Musical Entity

+ type: `track` (string)
+ title: `Karma Police` (string)
+ album (object)
  + title: `OK Computer` (string)
  + artist: `Radiohead` (string)
  + picture: `https://api.deezer.com/album/14879699/image` (string)
  + safe_title: `OK Computer` (string)
  + extra_info (object)
    + is_cover: `false` (boolean)
    + is_remix: `false` (boolean)
    + acoustic: `false` (boolean)
    + context (array[string])
        + `Deluxe Edition`
+ links (object)
  + deezer (array[string])
      + `http\://www.deezer.com/track/138539981`
+ safe_title: `Karma Police` (string)
+ extra_info (object)
  + is_cover: `false` (boolean)
  + is_remix: `false` (boolean)
  + acoustic: `false` (boolean)
  + context (array[string])



# Group Authentication

## OAuth Access token [/auth/token]

A valid token MUST be provided for each request that requires authentication.

### Get an access token [POST]

Allows to retrieve a valid OAuth token for your application, using the application consumer key and secret.

> This endpoint is not protected

+ Request Get a token
    + Headers

            Content-Type: application/x-www-form-urlencoded;charset=UTF-8

    + Body

            client_id=Your application customer key
            &client_secret=Your application customer secret
            &grant_type=client_credentials

+ Response 200 (application/json)
    + Attributes (OAuth valid response)

+ Response 400 (application/json)

    + Body
    
            {"error":"invalid_client","error_description":"The client credentials are invalid"}

+ Request Missing info

    + Headers

            Content-Type: application/x-www-form-urlencoded;charset=UTF-8

    + Body

            client_id=Your application customer key
            &client_secret=Your application customer secret

+ Response 400 (application/json)

    + Body
    
            {"error":"invalid_request","error_description":"The grant type was not specified in the request"}





# Group Platforms

## Platforms list [/platforms{?type}]

### Retrieve all Platforms [GET]
Retrieves the list of available **Platforms**

**List of available types**

| Type | Underlying interface |
| --- | ---- |
| `streaming` | [Platform\WebStreamingPlatformInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/WebStreamingPlatformInterface.php)  |
| `store` | [Platform\WebStoreInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/WebStoreInterface.php)  |
| `scrobbling` | [Platform\ScrobblingPlatformInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/ScrobblingPlatformInterface.php)  |

+ Parameters
    + type: `streaming` (optional, string) ... The type of platform to retrieve

+ Request Valid Authentication

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        - platforms (array[Platform])

+ Response 404 (application/json)

    + Body

            {
                "errors": [
                {"BAD_PLATFORM": "This platform type does not exist"}
                ]
            }

+ Request Invalid token

    + Headers

            Accept: "application/json"
            Authorization: "Bearer invalid_token"

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                {"NOT_AUTHORIZED": "Not authorized"}
                ]
            }

## Platform detail [/platform/{tag}]

### Retrieve a Platform [GET]
Retrieves a specific **Platform** and its details

> See `/platforms` to get a list of all available platforms

+ Parameters
    + tag: `deezer` (required, string) ... The tag of the platform to retrieve

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (Platform)

+ Response 404 (application/json)

    + Body

            {
                "errors": [
                {"BAD_PLATFORM": "This platform does not exist"}
                ]
            }




# Group Search

## Search [/search/{type}/{tag}{?q,mode}]

### Search a specific platform [GET]
Search for tracks or albums on a specific platform

**Capabilities**

To be able to search on a platform, the platform must have the **track\_search** or **album\_search** capability.

**Mode**

The **mode** indicates whether we're going to eagerly fetch data when it's missing from the platform response. **It is not used as for now** but was handy when Spotify didn't return the artist when fetching an album. In `eager` mode, we made a supplementary call to get the artist info.

> Don't forget to url-encode the query (`q`) if necessary

+ Parameters
    + type: `track` (required, string) ... The type of musical entity to search for. Can be **track** or **album** for now.
    + tag: `deezer` (required, string) ... The tag of the platform to search on
    + q: `ok+computer` (required, string) ... The text to search for
    + mode: `lazy` (optional, string) ... The search mode, defaults to `lazy`

+ Request Track
    + Parameters
        + type: `track` 
        + tag: `deezer` 
        + q: `ok+computer`

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[object])
            * (object)
                * musical_entity (object)
                    + type: `track` (string)
                    + title: `Karma Police` (string)
                    + album (object)
                      + title: `OK Computer` (string)
                      + artist: `Radiohead` (string)
                      + picture: `https://api.deezer.com/album/14879699/image` (string)
                      + safe_title: `OK Computer` (string)
                      + extra_info (object)
                        + is_cover: `false` (boolean)
                        + is_remix: `false` (boolean)
                        + acoustic: `false` (boolean)
                        + context (array[string])
                            + `Deluxe Edition`
                    + links (object)
                      + deezer (array[string])
                          + `http\://www.deezer.com/track/138539981`
                    + safe_title: `Karma Police` (string)
                    + extra_info (object)
                      + is_cover: `false` (boolean)
                      + is_remix: `false` (boolean)
                      + acoustic: `false` (boolean)
                      + context (array[string])
                + metadata (object)
                  + score: 0.97 (number)
                + share (object)
                  + intent: `590c6c8320b1b` (string)

+ Request Album
    + Parameters
        + type: `album` 
        + tag: `deezer` 
        + q: `ok+computer`

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[object])
            * (object)
                * musical_entity (object)
                    * type: `album` (string)
                    * title: `Ok Computer` (string)
                    * artist: `Radiohead` (string)
                    * picture: `https://api.deezer.com/album/14879699/image` (string)
                    * links (object)
                      * deezer (array[string])
                          * `https://www.deezer.com/album/14879699`
                    * safe_title: `Ok Computer` (string)
                    * extra_info (object)
                      * is_cover: `false` (boolean)
                      * is_remix: `false` (boolean)
                      * acoustic: `false` (boolean)
                      * context (array[string])
                * metadata (object)
                    * score: 1 (number)
                * share (object)
                    * intent: `590c6c8320b1b` (string)
                    * expires: `2016-05-05T12:30:00` (string)

+ Request Without `q` parameter

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Body

            {
                "errors": [
                {"MISSING_QUERY": "Missing or empty parameter : q (query)"}
                ]
            }

## Lookup [/lookup{?q,mode}]

### Lookup a permalink [GET]
Lookup a permalink to retrieve the info about the track or album

**Capabilities**

To be able to lookup on a platform, the platform must have the **lookup** capability.

**Mode**

_See search_

+ Parameters
    + q: `https://open.spotify.com/track/6IWxHgVbdKyUMydhVGXRaT` (required, string) ... The permalink to search for
    + mode: `lazy` (optional, string) ... The lookup mode, defaults to `lazy`

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + result (object)
            * musical_entity (object)
                * type: `track` (string)
                * title: `On The Road Again` (string)
                * album (object)
                  * title: `The Best Of Canned Heat` (string)
                  * artist: `Canned Heat` (string)
                  * picture: `https://i.scdn.co/image/b83f79c17a44a9aa24a49748d489c52d80c36fb5` (string)
                  * safe_title: `The Best Of Canned Heat` (string)
                  * extra_info (object)
                    * is_cover: `false` (boolean)
                    * is_remix: `false` (boolean)
                    * acoustic: `false` (boolean)
                    * context (array[string])
                * links (object)
                  * spotify (array[string])
                      * `https://open.spotify.com/track/6IWxHgVbdKyUMydhVGXRaT`
                * safe_title: `On The Road Again` (string)
                * extra_info (object)
                  * is_cover: `false` (boolean)
                  * is_remix: `false` (boolean)
                  * acoustic: `false` (boolean)
                  * context (array[string])
            * metadata (object)
                * query_words (array[string])
                    - `Canned Heat`
                    - `On The Road Again`
                * platform: `Spotify` (string)
            * share (object)
                * intent: `590c6c8320b1b` (string)
                * expires: `2016-05-05T12:30:00` (string)
                    

+ Request Unknown permalink

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Body

            {
                "errors": [
                {"PERMALINK_UNKNOWN": "This permalink does not belong to any known platform"}
                ]
            }

## Aggregate [/aggregate/{type}{?q,mode,aggressive,include}]

### Search on multiple platforms at once [GET]
Search for tracks or albums on multiple platforms

**Mode**

_See search_

**Include**

For aggregation, you can choose which platforms to aggregate to improve the response time of the endpoint. The parameter accepts a string which is a concatenation of the platforms tags separated by a comma.


```http
GET aggregate/track?q=test&include=deezer,spotify,qobuz
```

If an unknown platform tag is passed, it is ignored. If the `include` parameter is empty or not given, the API will agreggate the results of all available platforms that are capable of searching this musical entity type.

**Merging aggressively**

The `aggressive` parameter allows to merge tracks without taking the album name into account, or to merge albums without taking the artist name into account. This works for a majority of scenarios since it's quite rare that an artist released two tracks with exactly the same name for instance, but it can sometimes confuse **live** or **edit** versions, for instance.

Acoustic versions, covers or remix should be correctly differentiated even if you merge aggressively.

+ Parameters
    + type: `track` (required, string) ... The type of musical entity to search for. Can be **track** or **album** for now.
    + q: `karma+police` (required, string) ... The text to search for
    + mode: `lazy` (optional, string) ... The lookup mode, defaults to `lazy`
    + aggressive: `false` (optional, boolean) ... Whether to merge tracks without looking at the album name or album without looking at the artist name. Defaults to `false`
    + include: `deezer,spotify,qobuz` (optional, string) ... A list of comma separated platform tags from which to aggregate results.

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[Platform Result])
    

+ Request With errors

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + errors (array[object])
            * (object)
                + FETCH_PROBLEM: `There was a problem while fetching data from the platform` (string)
        + results (array[Platform Result])
    

# Group Share

## Share [/share/{intent}]

### Share an intent [GET]
Share a previous result as a tuneefy url, using the provided intent.

+ Parameters
    + intent: `5911b14861018` (required, string) ... The share intent to use.

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Body
    
            {
              "uid": "k0bun0",
              "link": "http://tuneefy.com/s/track/k0bun0"
            }

+ Request Expired or bad intent

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Body
    
            {
                "errors": [
                {
                  "NO_OR_EXPIRED_INTENT": "No intent with the requested uid"
                }
              ]
            }

# Group Postman configuration

Below is a [Postman](https://www.getpostman.com/) configuration if you want to test the API and fiddle with the parameters:

The Collection (V2) : [tuneefy_API.postman_collection.json](https://github.com/tchapi/tuneefy2/tree/master/examples/postman/tuneefy_API.postman_collection.json)

The Environment : [tuneefy.postman_environment.json](https://github.com/tchapi/tuneefy2/tree/master/examples/postman/tuneefy.postman_environment.json)

> NB : In the collection, you must replace the key and secret with the ones provided for you, and the example intent must be replaced with a real intent from one of your calls to work properly.



# Group API client examples

Here are very simple (and not optimized) examples to get you started. You can find these examples on github in the [examples](https://github.com/tchapi/tuneefy2/tree/master/examples) folder.

### PHP

We use **curl** to retrieve the token and then perform a basic search.

```php
<?php

$key = 'administrator';
$secret = 'password';

$host = 'https://data.tuneefy.com/v2';
$tokenEndpoint = $host.'/auth/token';
$searchEndpoint = $host.'/search/track/spotify?q=amon+tobin&limit=1';

// 1. Request token
$tk = curl_init($tokenEndpoint);
curl_setopt($tk, CURLOPT_HTTPHEADER, [
    'Content-Type: application/x-www-form-urlencoded;'.
    'charset=UTF-8'
]);
curl_setopt($tk, CURLOPT_POSTFIELDS, 
    'grant_type=client_credentials'.
    '&client_id='.$key.
    '&client_secret='.$secret
);
curl_setopt($tk, CURLOPT_RETURNTRANSFER, true);
$token = json_decode(curl_exec($tk));
curl_close($tk);

// 2. Use token for search on Spotify
if (isset($token->token_type) && $token->token_type === 'Bearer') {
    $br = curl_init($searchEndpoint);
    curl_setopt($br, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer '.$token->access_token,
        'Accept: application/json',
    ]);
    curl_setopt($br, CURLOPT_RETURNTRANSFER, true);
    $data = curl_exec($br);
    curl_close($br);
  
    // 3. Tada ! 
    echo "ðŸŽ‰\n";
    var_dump($data);
} else {
    echo "Wrong key/secret pair";
}
```

### Shell

We use **curl** and **jq** too in a very simple fashion.

```bash
#!/bin/bash

response=$(curl -X POST --silent -d client_id=administrator -d client_secret=password -d grant_type=client_credentials https://data.tuneefy.com/v2/'auth/token)

token=$(echo $response | jq --raw-output '.access_token')

echo ðŸŽ‰
curl --header "Authorization: Bearer $token" "https://data.tuneefy.com/v2/'search/track/spotify?q=amon+tobin&limit=1"

```


### Javascript (node)

We use the **request** and **json** modules.

```js
var request = require('request');
 
var key = 'administrator';
var secret = 'password';

var tokenEndpoint = 'https://data.tuneefy.com/v2/'auth/token';
var searchEndpoint = 'https://data.tuneefy.com/v2/'search/track/spotify?q=amon+tobin&limit=1';

// 1. Request token
request.post({
  url: tokenEndpoint,
  form: {
    'grant_type': 'client_credentials',
    'client_id': key,
    'client_secret': secret
  }
}, function(err, httpResponse, body) {
  var json = JSON.parse(body);

  if (json.token_type && json.token_type === 'Bearer') {
      // 2. Use token for search on Spotify 
      request({
        url: searchEndpoint,
        'auth': {
          'bearer': json.access_token
        },
        method: 'GET'
      }, function(err, httpResponse, body) {
        var json = JSON.parse(body);

        // 3. Tada ! 
        console.log("ðŸŽ‰");
        console.log(JSON.stringify(json, null, 4));
      });
  }

});

```


### Python

We use the **requests** module (standard).

```python
# coding=utf8
import requests, json

key = 'administrator'
secret = 'password'

tokenEndpoint = 'https://data.tuneefy.com/v2/'auth/token'
searchEndpoint = 'https://data.tuneefy.com/v2/'search/track/spotify?q=amon+tobin&limit=1'

# 1. Request token
payload = {'grant_type': 'client_credentials', 'client_id': key, 'client_secret': secret}
req = requests.post(tokenEndpoint,data=payload)

token = req.json()

# 2. Use token for search on Spotify
if token['token_type'] and token['token_type'] == 'Bearer':
    headers = {'Authorization': 'Bearer '+token['access_token'], 'Accept': 'application/json'}
    req = requests.get(searchEndpoint, headers=headers)

    # 3. Tada ! 
    print "ðŸŽ‰"
    print json.dumps(req.json(), indent=4, separators=(',', ': '))
else:
    print "Wrong key/secret pair"

```